import { useState, useRef, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Badge } from '@/components/ui/badge';
import { Avatar, AvatarImage, AvatarFallback } from '@/components/ui/avatar';
import { useAppStore } from '@/store/useAppStore';
import { 
  MessageCircle, 
  Send, 
  Bot, 
  User, 
  Code, 
  Workflow, 
  Lightbulb,
  GripVertical
} from 'lucide-react';

interface ChatInterfaceProps {
  currentMode: 'code' | 'visual';
}

export const ChatInterface = ({ currentMode }: ChatInterfaceProps) => {
  const { messages, addMessage, setCode, mode, chatPanelWidth, setChatPanelWidth } = useAppStore();
  const [input, setInput] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  // Resizing logic
  const [isResizing, setIsResizing] = useState(false);
  const resizeRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    if (!isResizing) return;
    const handleMouseMove = (e: MouseEvent) => {
      const container = resizeRef.current?.parentElement;
      if (!container) return;
      const containerRect = container.getBoundingClientRect();
      const minWidth = 240;
      const maxWidth = Math.min(window.innerWidth * 0.3, 600);
      const newWidth = containerRect.right - e.clientX;
      const clampedWidth = Math.max(minWidth, Math.min(maxWidth, newWidth));
      setChatPanelWidth(clampedWidth);
    };
    const handleMouseUp = () => setIsResizing(false);
    document.addEventListener('mousemove', handleMouseMove);
    document.addEventListener('mouseup', handleMouseUp);
    return () => {
      document.removeEventListener('mousemove', handleMouseMove);
      document.removeEventListener('mouseup', handleMouseUp);
    };
  }, [isResizing, setChatPanelWidth]);

  const handleResizeStart = (e: React.MouseEvent) => {
    e.preventDefault();
    setIsResizing(true);
  };

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages, isTyping]);

  const generateCodeFromPrompt = (prompt: string) => {
    const lowerPrompt = prompt.toLowerCase();
    
    if (lowerPrompt.includes('react component')) {
      return `import React from 'react';

const MyComponent = () => {
  return (
    <div className="p-4 bg-card rounded-lg border">
      <h2 className="text-lg font-semibold mb-2">New Component</h2>
      <p className="text-muted-foreground">
        This component was generated by AI based on your request.
      </p>
    </div>
  );
};

export default MyComponent;`;
    }
    
    if (lowerPrompt.includes('function') || lowerPrompt.includes('calculate')) {
      return `// Generated function based on your request
function calculate(a, b) {
  // Add your logic here
  return a + b;
}

// Example usage
const result = calculate(5, 3);
console.log('Result:', result);`;
    }
    
    if (lowerPrompt.includes('api') || lowerPrompt.includes('fetch')) {
      return `// API call function
async function fetchData(url) {
  try {
    const response = await fetch(url);
    
    if (!response.ok) {
      throw new Error(\`HTTP error! status: \${response.status}\`);
    }
    
    const data = await response.json();
    return data;
  } catch (error) {
    console.error('Error fetching data:', error);
    throw error;
  }
}

// Example usage
fetchData('/api/users')
  .then(data => console.log('Users:', data))
  .catch(error => console.error('Failed to fetch users:', error));`;
    }
    
    return `// Generated code based on your request: "${prompt}"
console.log('Hello from AI-generated code!');

// TODO: Implement your specific requirements here
function yourFunction() {
  // Add your logic based on the prompt
  return 'AI is ready to help you code!';
}

yourFunction();`;
  };

  const handleSend = async () => {
    if (!input.trim()) return;

    // Add user message
    addMessage({
      type: 'user',
      content: input,
      context: currentMode === 'code' ? 'code' : 'visual'
    });

    const currentInput = input;
    setInput('');
    setIsTyping(true);

    // Check if user is asking for code generation
    const isCodeRequest = currentMode === 'code' && (
      currentInput.toLowerCase().includes('write') ||
      currentInput.toLowerCase().includes('create') ||
      currentInput.toLowerCase().includes('generate') ||
      currentInput.toLowerCase().includes('build') ||
      currentInput.toLowerCase().includes('make') ||
      currentInput.toLowerCase().includes('code')
    );

    // Simulate AI response
    setTimeout(() => {
      let aiResponse = getAIResponse(currentInput, currentMode);
      
      // If it's a code request, generate and update code
      if (isCodeRequest) {
        const generatedCode = generateCodeFromPrompt(currentInput);
        setCode(generatedCode);
        aiResponse = `I've generated code based on your request and updated the editor. The code includes:\n\n${currentInput}\n\nYou can now run or modify it as needed!`;
      }
      
      addMessage({
        type: 'ai',
        content: aiResponse,
        context: currentMode === 'code' ? 'code' : 'visual'
      });
      
      setIsTyping(false);
    }, 1500);
  };

  const getAIResponse = (userInput: string, mode: 'code' | 'visual'): string => {
    if (mode === 'code') {
      return `I understand you want to work with code. Based on your request "${userInput}", I can help you create, modify, or debug code. Let me generate some suggestions for you.`;
    } else {
      return `I see you're working in visual mode. For "${userInput}", I can help you create flow diagrams, add nodes, or modify the visual structure of your project.`;
    }
  };

  const getContextIcon = (context?: string) => {
    switch (context) {
      case 'code':
        return <Code className="h-3 w-3" />;
      case 'visual':
        return <Workflow className="h-3 w-3" />;
      default:
        return <Lightbulb className="h-3 w-3" />;
    }
  };

  const getContextColor = (context?: string) => {
    switch (context) {
      case 'code':
        return 'text-primary';
      case 'visual':
        return 'text-accent';
      default:
        return 'text-muted-foreground';
    }
  };

  return (
    <div 
      className="h-full flex flex-col bg-card relative"
      style={{ 
        width: chatPanelWidth, 
        minWidth: 240, 
        maxWidth: Math.min(window.innerWidth * 0.3, 600) 
      }}
    >
      {/* Resize Handle (left edge) */}
      <div
        ref={resizeRef}
        className="absolute left-0 top-0 h-full w-2 flex items-center justify-center cursor-ew-resize select-none group z-20 bg-transparent"
        onMouseDown={handleResizeStart}
        style={{ minWidth: 8, maxWidth: 16 }}
        title="Resize chat panel"
      >
        <div className="w-1 h-8 bg-transparent rounded-full group-hover: transition-colors absolute left-1/2 -translate-x-1/2" />
        <GripVertical className="h-2 w-2 text-muted-foreground relative z-10" />
      </div>
      {/* Header */}
      <div className="flex items-center justify-between p-3 border-b border-border">
        <div className="flex items-center gap-3">
          <MessageCircle className="h-4 w-4 text-muted-foreground" />
          <span className="text-sm font-medium">AI Assistant</span>
          <Badge variant="outline" className="text-xs">
            {getContextIcon(currentMode)}
            <span className="ml-1">{currentMode}</span>
          </Badge>
        </div>
      </div>

      {/* Messages */}
      <ScrollArea className="flex-1 p-3">
        <div className="space-y-4">
          {messages.length === 0 ? (
            <div className="flex items-center justify-center h-full text-center">
              <div className="space-y-2">
                <Bot className="h-8 w-8 text-muted-foreground mx-auto" />
                <p className="text-sm text-muted-foreground">
                  Hello! I'm your AI coding assistant.
                </p>
                <p className="text-xs text-muted-foreground">
                  Ask me to write code, create components, or help with your project.
                </p>
              </div>
            </div>
          ) : (
            messages.map((message) => (
              <div
                key={message.id}
                className={`flex gap-3 ${
                  message.type === 'user' ? 'justify-end' : 'justify-start'
                }`}
              >
                {message.type === 'ai' && (
                  <Avatar className="h-8 w-8">
                    <AvatarFallback className="bg-primary text-primary-foreground">
                      <Bot className="h-4 w-4" />
                    </AvatarFallback>
                  </Avatar>
                )}
                
                <div className={`max-w-[80%] space-y-1 ${
                  message.type === 'user' ? 'flex flex-col items-end' : ''
                }`}>
                  <div className={`p-3 rounded-lg text-sm ${
                    message.type === 'user' 
                      ? 'bg-primary text-primary-foreground' 
                      : 'bg-muted border border-border'
                  }`}>
                    {message.content}
                  </div>
                  
                  <div className="flex items-center gap-2 text-xs text-muted-foreground">
                    <span>{message.timestamp.toLocaleTimeString()}</span>
                    {message.context && (
                      <Badge variant="secondary" className="text-xs">
                        {getContextIcon(message.context)}
                        <span className="ml-1">{message.context}</span>
                      </Badge>
                    )}
                  </div>
                </div>

                {message.type === 'user' && (
                  <Avatar className="h-8 w-8">
                    <AvatarFallback className="bg-secondary text-secondary-foreground">
                      <User className="h-4 w-4" />
                    </AvatarFallback>
                  </Avatar>
                )}
              </div>
            ))
          )}
          
          {isTyping && (
            <div className="flex gap-3 justify-start">
              <Avatar className="h-8 w-8">
                <AvatarFallback className="bg-primary text-primary-foreground">
                  <Bot className="h-4 w-4" />
                </AvatarFallback>
              </Avatar>
              <div className="bg-muted border border-border p-3 rounded-lg">
                <div className="flex space-x-1">
                  <div className="w-2 h-2 bg-primary rounded-full animate-bounce [animation-delay:-0.3s]"></div>
                  <div className="w-2 h-2 bg-primary rounded-full animate-bounce [animation-delay:-0.15s]"></div>
                  <div className="w-2 h-2 bg-primary rounded-full animate-bounce"></div>
                </div>
              </div>
            </div>
          )}
        </div>
        <div ref={messagesEndRef} />
      </ScrollArea>

      {/* Input */}
      <div className="p-3 border-t border-border">
        <div className="flex gap-2">
          <Input
            value={input}
            onChange={(e) => setInput(e.target.value)}
            placeholder={`Ask me to ${currentMode === 'code' ? 'write code, create functions...' : 'build visual flows, add nodes...'}`}
            onKeyPress={(e) => e.key === 'Enter' && handleSend()}
            className="flex-1"
          />
          <Button 
            onClick={handleSend} 
            disabled={!input.trim() || isTyping}
            size="sm"
          >
            <Send className="h-4 w-4" />
          </Button>
        </div>
      </div>
    </div>
  );
};